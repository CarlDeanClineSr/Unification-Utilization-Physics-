name: Append JWST status entry
on:
  workflow_dispatch:
    inputs:
      date_utc:
        description: "UTC timestamp (YYYY-MM-DDTHH:MM:SSZ)"
        required: true
      obsid:
        description: "Observation ID"
        required: true
      instrument:
        description: "Instrument (e.g., NIRSpec, MIRI)"
        required: true
        type: choice
        options:
          - NIRSpec
          - MIRI
          - NIRCam
          - NIRISS
          - FGS
      mode:
        description: "Mode (e.g., G395H/F290LP, MRS Ch1-Short)"
        required: true
      state:
        description: "Observation state"
        required: true
        type: choice
        options:
          - Scheduled
          - Executing
          - Complete
          - Failed
          - Partial
      t_exp:
        description: "Total exposure time (e.g., 8.17 ks)"
        required: false
        default: "(TBD)"
      dithers:
        description: "Dither pattern/points"
        required: false
        default: "(TBD)"
      notes:
        description: "Short note/anomaly"
        required: false
        default: ""
      program_id:
        description: "JWST Program ID (e.g., 8714)"
        required: false
        default: ""
      target_name:
        description: "Target name"
        required: false
        default: ""
      quality_flag:
        description: "Data quality assessment"
        required: false
        type: choice
        options:
          - Nominal
          - Warning
          - Issue
          - Unknown
        default: "Unknown"
jobs:
  append:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate inputs
        run: |
          # Validate UTC timestamp format
          if ! echo "${{ inputs.date_utc }}" | grep -qE "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"; then
            echo "Error: Invalid UTC timestamp format. Use YYYY-MM-DDTHH:MM:SSZ"
            exit 1
          fi
          
          # Validate observation ID format (basic check)
          if [ ${#"${{ inputs.obsid }}"} -lt 10 ]; then
            echo "Warning: Observation ID seems unusually short"
          fi
      
      - name: Append enhanced entry to live_status_8714.md
        shell: bash
        run: |
          # Enhanced status line with additional fields
          line="- ${{ inputs.date_utc }} | ${{ inputs.obsid }} | ${{ inputs.instrument }} | ${{ inputs.mode }} | ${{ inputs.state }} | ${{ inputs.t_exp }} | ${{ inputs.dithers }} | ${{ inputs.quality_flag }} | ${{ inputs.notes }}"
          
          # Add program and target info if provided
          if [ -n "${{ inputs.program_id }}" ] || [ -n "${{ inputs.target_name }}" ]; then
            line="$line | Prog:${{ inputs.program_id }} Tgt:${{ inputs.target_name }}"
          fi
          
          printf "\n%s\n" "$line" >> live_status_8714.md
      
      - name: Update status statistics
        run: |
          # Create or update a simple statistics file
          python3 << 'EOF'
          import re
          import json
          from datetime import datetime
          from collections import defaultdict
          
          # Read the status file
          try:
              with open('live_status_8714.md', 'r') as f:
                  content = f.read()
          except FileNotFoundError:
              content = ""
          
          # Extract status entries
          lines = content.split('\n')
          status_lines = [line for line in lines if line.startswith('- ') and '|' in line]
          
          # Parse statistics
          stats = {
              'total_entries': len(status_lines),
              'last_updated': datetime.now().isoformat(),
              'state_counts': defaultdict(int),
              'instrument_counts': defaultdict(int),
              'quality_counts': defaultdict(int)
          }
          
          for line in status_lines:
              parts = [p.strip() for p in line.split('|')]
              if len(parts) >= 5:
                  state = parts[4] if len(parts) > 4 else 'Unknown'
                  instrument = parts[2] if len(parts) > 2 else 'Unknown'
                  
                  stats['state_counts'][state] += 1
                  stats['instrument_counts'][instrument] += 1
                  
                  # Quality flag (if present)
                  if len(parts) >= 8:
                      quality = parts[7] if parts[7] else 'Unknown'
                      stats['quality_counts'][quality] += 1
          
          # Convert defaultdict to regular dict for JSON serialization
          stats['state_counts'] = dict(stats['state_counts'])
          stats['instrument_counts'] = dict(stats['instrument_counts'])
          stats['quality_counts'] = dict(stats['quality_counts'])
          
          # Save statistics
          with open('jwst_status_stats.json', 'w') as f:
              json.dump(stats, f, indent=2)
          
          print(f"Updated statistics: {stats['total_entries']} total entries")
          EOF
      
      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add live_status_8714.md jwst_status_stats.json
          
          # Enhanced commit message with more context
          commit_msg="JWST Status: ${{ inputs.obsid }} (${{ inputs.state }})

          Instrument: ${{ inputs.instrument }}
          Mode: ${{ inputs.mode }}
          Quality: ${{ inputs.quality_flag }}
          Timestamp: ${{ inputs.date_utc }}"
          
          if [ -n "${{ inputs.program_id }}" ]; then
            commit_msg="$commit_msg
          Program: ${{ inputs.program_id }}"
          fi
          
          if [ -n "${{ inputs.notes }}" ]; then
            commit_msg="$commit_msg
          Notes: ${{ inputs.notes }}"
          fi
          
          git commit -m "$commit_msg"
          git push
      
      - name: Summary
        run: |
          echo "✅ JWST status entry added successfully!"
          echo "📊 Observation: ${{ inputs.obsid }}"
          echo "🔭 Instrument: ${{ inputs.instrument }} (${{ inputs.mode }})"
          echo "📈 State: ${{ inputs.state }}"
          echo "⚡ Quality: ${{ inputs.quality_flag }}"
          if [ -n "${{ inputs.notes }}" ]; then
            echo "📝 Notes: ${{ inputs.notes }}"
          fi
